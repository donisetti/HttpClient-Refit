// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace NetHttp.WebAPI.Abstractions
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    [DebuggerNonUserCode]
    [Preserve]
    partial class AutoGeneratedIExtremelyDifficultCrudApi<TYourType, TKey>
     : IExtremelyDifficultCrudApi<TYourType, TKey>
        where TYourType : class
        {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIExtremelyDifficultCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<List<TYourType>>> GetAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAll", new Type[] {  });
            return (Task<ApiResponse<List<TYourType>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<TYourType>> GetById(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetById", new Type[] { typeof(TKey) });
            return (Task<ApiResponse<TYourType>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<TYourType>> Create(TYourType payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(TYourType) });
            return (Task<ApiResponse<TYourType>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ApiResponse<TYourType>> Update(TKey key,TYourType payload)
        {
            var arguments = new object[] { key,payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(TKey),typeof(TYourType) });
            return (Task<ApiResponse<TYourType>>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(TKey) });
            return (Task)func(Client, arguments);
        }

    }
}
